#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::Supported::GusConfig;

my ($gusConfigFile, $drop, $create, $db);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	   "drop!" => \$drop,
	   "create!" => \$create,
	   "db=s" => \$db);

if (!$db || !($drop || $create) || ($drop && $create)) {
  die "usage: apidbSchema --db database [--drop | --create] [--gusConfigFile gus_config_file]\n";
}

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $login = $gusconfig->getDatabaseLogin();
my $password = $gusconfig->getDatabasePassword();

my @create = qw( enterDbVersion.sql
                 createApidbSchema.sql
                 removeNullConstraintsFromSimilarityTables.sql
                 createAnalysisMethodInvocation.sql
                 createChromosome6Orthology.sql
                 createDbLinks.sql
                 createDbUser.sql
                 createExpressionProfileTables.sql
                 createGeneInteractionTables.sql
                 createGeneMappingView.sql
                 createGeneFeatureProduct.sql
                 createGeneFeatureName.sql
                 createIsolateVocabulary.sql
                 createMassSpecSummary.sql
                 createGusTuning.sql
                 createOrthologGroup.sql
                 createOrthomclEngine.sql
                 createPhylogeneticProfile.sql
                 createPhylogeneticTree.sql
                 createRelatedNaFeature.sql
                 createReportCache.sql
                 createRodentChrColors.sql
                 createSequenceAttributeTables.sql
                 createStoredProcedures.sql
                 createSyntenyTables.sql
                 createToxodbGenesView.sql
                 createTransmembraneTable.sql
                 createTuningManager.sql
                 createContinents.sql
		 createWorkflow.sql
		 createsiRNA.sql
		 createNextGenSeqCoverage.sql
		 createNextGenSeq_Align.sql
		 createPlasmoPfalLocations.sql
		 createPlasmoMapp.sql
		 createGeneGenomicSequence_Split.sql
		 createOrganismProject.sql
                 createIsolateMapping.sql
	       );

my @delete = qw( dropTuningManager.sql
                 dropAnalysisMethodInvocation.sql
                 dropDbLinks.sql
                 dropDbUser.sql
                 dropExpressionProfileTables.sql
                 dropGeneInteractionTables.sql
                 dropGeneMappingView.sql
                 dropGeneFeatureProduct.sql
                 dropGeneFeatureName.sql
                 dropMassSpecSummary.sql
                 dropOrthologGroup.sql
                 dropOrthomclEngine.sql
                 dropPhylogeneticProfile.sql
                 dropSequenceAttributeTables.sql
                 dropSyntenyTables.sql
                 dropToxodbGenesView.sql
                 dropTransmembraneTable.sql
		 dropWorkflow.sql
                 dropOrganismProject.sql
		 dropGenegenomicsequence.sql
                 restoreNullConstraintsFromSimilarityTables.sql
                 dropGusTuning.sql
                 dropStoredProcedures.sql
                 dropApidbSchema.sql
	       );

if ($create) {

  for my $sql (@create) {
    &runSql($login, $password, $db, $sql);
  }

} else {

  for my $sql (@delete) {
    &runSql($login, $password, $db, $sql);
  }

}

sub runSql {
  my ($login, $password, $db, $file) = @_;

  my $fullFile = "$ENV{GUS_HOME}/lib/sql/apidbschema/$file";

  -e $fullFile || die "File '$fullFile' does not exist";

  my $cmd = "sqlplus $login\@$db/$password \@$fullFile";
print STDERR "$cmd\n";
  system($cmd);
  my $status = $? >> 8;
  die "Failed with status '$status running cmd: $cmd'" if $status;
}
